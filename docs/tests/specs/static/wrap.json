{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "height": 400,
  "width": 600,
  "signals": [
    {
      "name": "datacount",
      "value": 2,
      "bind": {
        "input": "range",
        "min": 1,
        "max": 100
      }
    },
    {
      "name": "mincell",
      "value": 50,
      "bind": {
        "input": "range",
        "min": 1,
        "max": 100
      }
    },
    {
      "name": "target",
      "value": 1.2,
      "bind": {
        "input": "range",
        "min": 0.1,
        "max": 2
      }

    },
    {
      "name": "minArea",
      "update": "mincell*mincell"
    },
    {
      "name": "vh",
      "value": 200,
      "bind": {
        "input": "range",
        "min": 10,
        "max": 400
      }
    },
    {
      "name": "vw",
      "value": 160,
      "bind": {
        "input": "range",
        "min": 10,
        "max": 600
      }
    },
    {
      "name": "aspect",
      "update": "vw/vh"
    },
    {
      "name": "ceilaspect",
      "update": "ceil(aspect)"
    },
    {
      "name": "datalength",
      "update": "data('data1').length"
    },
    {
      "name": "growCellWidthCalc",
      "update": "vw / mincell"
    },
    {
      "name": "growCellCount",
      "update": "max(floor(vw/mincell), 1)"
    },
    {
      "name": "growCellWidth",
      "update": "vw / growCellCount"
    },
    {
      "name": "growRowCount",
      "update": "ceil(datalength/growCellCount)"
    },
    {
      "name": "fitsArea",
      "update": "((datalength * minArea) <= (vw * vh))"
    },
    {
      "name": "fits",
      "update": "fitsArea && length(data('fit'))>0"
    },
    {
      "name": "cellCount",
      "update": "fits ? data('fit')[0].cols : growCellCount"
    },
    {
      "name": "cellWidth",
      "update": "fits ? data('fit')[0].cellw : growCellWidth"
    },
    {
      "name": "cellHeight",
      "update": "fits ? data('fit')[0].cellh : mincell"
    }
  ],
  "data": [
    {
      "name": "fit0",
      "transform": [
        {
          "type": "sequence",
          "start": 1,
          "stop": {
            "signal": "ceil(sqrt(datacount))+1"
          }
        },
        {
          "type": "formula",
          "expr": "ceil(datacount/datum.data)",
          "as": "complement"
        }
      ]
    },
    {
      "name": "fit1",
      "source": "fit0",
      "transform": [
        {
          "type": "project",
          "fields": ["data"],
          "as": ["cols"]
        }
      ]
    },
    {
      "name": "fit2",
      "source": "fit0",
      "transform": [
        {
          "type": "project",
          "fields": ["complement"],
          "as": ["cols"]
        }
      ]
    },
    {
      "name": "fit",
      "source": ["fit1", "fit2"],
      "transform": [
        {
          "type": "formula",
          "expr": "ceil(datacount/datum.cols)",
          "as": "rows"
        },
        {
          "type": "formula",
          "expr": "vw/datum.cols",
          "as": "cellw"
        },
        {
          "type": "formula",
          "expr": "vh/datum.rows",
          "as": "cellh"
        },
        {
          "type": "formula",
          "expr": "datum.cellw >=mincell && datum.cellh >=mincell",
          "as": "meetsmin"
        },
        {
          "type": "filter",
          "expr": "datum.meetsmin"
        },
        {
          "type": "formula",
          "expr": "datum.cellw/datum.cellh",
          "as": "aspect"
        },
        {
          "type": "formula",
          "expr": "abs(datum.aspect-target)",
          "as": "ideal_aspect"
        },
        {
          "type": "formula",
          "expr": "datacount/(datum.cols*datum.rows)",
          "as": "coverage"
        },
        {
          "type": "collect",
          "sort": {
            "field": ["ideal_aspect", "coverage"],
            "order": ["ascending", "descending"]
          }
        }
      ]
    },
    {
      "name": "data1",
      "transform": [
        {
          "type": "sequence",
          "start": 0,
          "stop": {
            "signal": "datacount"
          }
        },
        {
          "type": "window",
          "ops": ["row_number"]
        }
      ]
    },
    {
      "name": "data2",
      "source": "data1",
      "transform": [
        {
          "type": "formula",
          "expr": "floor((datum.row_number-1)/cellCount)",
          "as": "y"
        },
        {
          "type": "formula",
          "expr": "(datum.row_number-1)%cellCount",
          "as": "x"
        }
      ]
    }
  ],
  "marks": [
    {
      "type": "text",
      "encode": {
        "update": {
          "text": {
            "signal": "fitsArea + ' ' + length(data('fit')) + ' ' + aspect"
          }
        }
      }
    },
    {
      "type": "rect",
      "encode": {
        "enter": {
          "fill": {
            "value": "#ddd"
          }
        },
        "update": {
          "height": {
            "signal": "vh"
          },
          "width": {
            "signal": "vw"
          }
        }
      }
    },
    {
      "name": "cells",
      "type": "rect",
      "from": {"data": "data2"},
      "encode": {
        "update": {
          "stroke": {
            "value": "#000"
          },
          "fill": {
            "value": "orange"
          },
          "height": {
            "signal": "cellHeight"
          },
          "width": {
            "signal": "cellWidth"
          },
          "x": {
            "signal": "datum.x*cellWidth"
          },
          "y": {
            "signal": "datum.y*cellHeight"
          }
        }
      }
    }
  ]
}
